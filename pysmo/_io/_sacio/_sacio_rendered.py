# WARNING: Do not edit this file!
# It is generated by running the script 'generate_sacio.py' using values from
# 'sacheader.yml' and the 'sacio-template.py.j2' file.
from ._defaults import SACIO_DEFAULTS
from typing import Any
from attrs import define, field, validators, converters, Attribute
from attrs_strict import type_validator
from enum import Enum
import numpy as np
import numpy.typing as npt


class IFTYPE(Enum):
    time = 1
    rlim = 2
    amph = 3
    xy = 4


class IDEP(Enum):
    unkn = 5
    disp = 6
    vel = 7
    acc = 8
    volts = 50


class IZTYPE(Enum):
    unkn = 5
    b = 9
    day = 10
    o = 11
    a = 12
    t0 = 13
    t1 = 14
    t2 = 15
    t3 = 16
    t4 = 17
    t5 = 18
    t6 = 19
    t7 = 20
    t8 = 21
    t9 = 22


class IEVTYP(Enum):
    unkn = 5
    nucl = 37
    pren = 38
    postn = 39
    quake = 40
    preq = 41
    postq = 42
    chem = 43
    qb = 72
    qb1 = 73
    qb2 = 74
    qbx = 75
    qmt = 76
    eq = 77
    eq1 = 78
    eq2 = 79
    me = 80
    ex = 81
    nu = 82
    nc = 83
    o = 11
    l = 85
    r = 86
    t = 87
    u = 88
    other = 44


class IQUAL(Enum):
    good = 45
    glch = 46
    drop = 47
    lowsn = 48
    other = 44


class ISYNTH(Enum):
    rldta = 49


class IMAGTYP(Enum):
    mb = 52
    ms = 53
    ml = 54
    mw = 55
    md = 56
    mx = 57


class IMAGSRC(Enum):
    neic = 58
    pde = 61
    isc = 62
    reb = 63
    usgs = 64
    brk = 65
    caltech = 66
    llnl = 67
    evloc = 68
    jsop = 69
    user = 70
    unknown = 71


class IBODY(Enum):
    sun = 98
    mercury = 99
    venus = 100
    earth = 101
    moon = 102
    mars = 103


SAC_ENUMS_DICT = dict(
    iftype=IFTYPE,
    idep=IDEP,
    iztype=IZTYPE,
    ievtyp=IEVTYP,
    iqual=IQUAL,
    isynth=ISYNTH,
    imagtyp=IMAGTYP,
    imagsrc=IMAGSRC,
    ibody=IBODY,
)


@define(frozen=True)
class HeaderType:
    definition: str
    undefined: float | int | str | bool
    length: int
    format: str
    description: str | None = None


HEADER_TYPES = dict(
    f=HeaderType(definition="floating", undefined=-12345, length=4, format="f"),
    n=HeaderType(definition="integer", undefined=-12345, length=4, format="i"),
    i=HeaderType(definition="enumerated", undefined=-12345, length=4, format="i"),
    l=HeaderType(definition="logical", undefined=False, length=1, format="?"),
    k=HeaderType(definition="alphanumeric", undefined="-12345", length=8, format="8s"),
    d=HeaderType(definition="double", undefined=-12345, length=8, format="d"),
)


@define(frozen=True)
class Header:
    start: int
    length: int
    format: str
    type: str
    required: bool


SAC_HEADERS = dict(
    delta=Header(start=0, length=4, format="f", type="f", required=True),
    depmin=Header(start=4, length=4, format="f", type="f", required=False),
    depmax=Header(start=8, length=4, format="f", type="f", required=False),
    unused3=Header(start=12, length=4, format="f", type="f", required=False),
    odelta=Header(start=16, length=4, format="f", type="f", required=False),
    b=Header(start=20, length=4, format="f", type="f", required=True),
    e=Header(start=24, length=4, format="f", type="f", required=True),
    o=Header(start=28, length=4, format="f", type="f", required=False),
    a=Header(start=32, length=4, format="f", type="f", required=False),
    internal9=Header(start=36, length=4, format="f", type="f", required=False),
    t0=Header(start=40, length=4, format="f", type="f", required=False),
    t1=Header(start=44, length=4, format="f", type="f", required=False),
    t2=Header(start=48, length=4, format="f", type="f", required=False),
    t3=Header(start=52, length=4, format="f", type="f", required=False),
    t4=Header(start=56, length=4, format="f", type="f", required=False),
    t5=Header(start=60, length=4, format="f", type="f", required=False),
    t6=Header(start=64, length=4, format="f", type="f", required=False),
    t7=Header(start=68, length=4, format="f", type="f", required=False),
    t8=Header(start=72, length=4, format="f", type="f", required=False),
    t9=Header(start=76, length=4, format="f", type="f", required=False),
    f=Header(start=80, length=4, format="f", type="f", required=False),
    resp0=Header(start=84, length=4, format="f", type="f", required=False),
    resp1=Header(start=88, length=4, format="f", type="f", required=False),
    resp2=Header(start=92, length=4, format="f", type="f", required=False),
    resp3=Header(start=96, length=4, format="f", type="f", required=False),
    resp4=Header(start=100, length=4, format="f", type="f", required=False),
    resp5=Header(start=104, length=4, format="f", type="f", required=False),
    resp6=Header(start=108, length=4, format="f", type="f", required=False),
    resp7=Header(start=112, length=4, format="f", type="f", required=False),
    resp8=Header(start=116, length=4, format="f", type="f", required=False),
    resp9=Header(start=120, length=4, format="f", type="f", required=False),
    stla=Header(start=124, length=4, format="f", type="f", required=False),
    stlo=Header(start=128, length=4, format="f", type="f", required=False),
    stel=Header(start=132, length=4, format="f", type="f", required=False),
    stdp=Header(start=136, length=4, format="f", type="f", required=False),
    evla=Header(start=140, length=4, format="f", type="f", required=False),
    evlo=Header(start=144, length=4, format="f", type="f", required=False),
    evel=Header(start=148, length=4, format="f", type="f", required=False),
    evdp=Header(start=152, length=4, format="f", type="f", required=False),
    mag=Header(start=156, length=4, format="f", type="f", required=False),
    user0=Header(start=160, length=4, format="f", type="f", required=False),
    user1=Header(start=164, length=4, format="f", type="f", required=False),
    user2=Header(start=168, length=4, format="f", type="f", required=False),
    user3=Header(start=172, length=4, format="f", type="f", required=False),
    user4=Header(start=176, length=4, format="f", type="f", required=False),
    user5=Header(start=180, length=4, format="f", type="f", required=False),
    user6=Header(start=184, length=4, format="f", type="f", required=False),
    user7=Header(start=188, length=4, format="f", type="f", required=False),
    user8=Header(start=192, length=4, format="f", type="f", required=False),
    user9=Header(start=196, length=4, format="f", type="f", required=False),
    dist=Header(start=200, length=4, format="f", type="f", required=False),
    az=Header(start=204, length=4, format="f", type="f", required=False),
    baz=Header(start=208, length=4, format="f", type="f", required=False),
    gcarc=Header(start=212, length=4, format="f", type="f", required=False),
    internal54=Header(start=216, length=4, format="f", type="f", required=False),
    internal55=Header(start=220, length=4, format="f", type="f", required=False),
    depmen=Header(start=224, length=4, format="f", type="f", required=False),
    cmpaz=Header(start=228, length=4, format="f", type="f", required=False),
    cmpinc=Header(start=232, length=4, format="f", type="f", required=False),
    xminimum=Header(start=236, length=4, format="f", type="f", required=False),
    xmaximum=Header(start=240, length=4, format="f", type="f", required=False),
    yminimum=Header(start=244, length=4, format="f", type="f", required=False),
    ymaximum=Header(start=248, length=4, format="f", type="f", required=False),
    unused63=Header(start=254, length=4, format="f", type="f", required=False),
    unused64=Header(start=258, length=4, format="f", type="f", required=False),
    unused65=Header(start=262, length=4, format="f", type="f", required=False),
    unused66=Header(start=264, length=4, format="f", type="f", required=False),
    unused67=Header(start=268, length=4, format="f", type="f", required=False),
    unused68=Header(start=272, length=4, format="f", type="f", required=False),
    unused69=Header(start=276, length=4, format="f", type="f", required=False),
    nzyear=Header(start=280, length=4, format="i", type="n", required=False),
    nzjday=Header(start=284, length=4, format="i", type="n", required=False),
    nzhour=Header(start=288, length=4, format="i", type="n", required=False),
    nzmin=Header(start=292, length=4, format="i", type="n", required=False),
    nzsec=Header(start=296, length=4, format="i", type="n", required=False),
    nzmsec=Header(start=300, length=4, format="i", type="n", required=False),
    nvhdr=Header(start=304, length=4, format="i", type="n", required=False),
    norid=Header(start=308, length=4, format="i", type="n", required=False),
    nevid=Header(start=312, length=4, format="i", type="n", required=False),
    npts=Header(start=316, length=4, format="i", type="n", required=True),
    internal80=Header(start=320, length=4, format="i", type="n", required=False),
    nwfid=Header(start=324, length=4, format="i", type="n", required=False),
    nxsize=Header(start=328, length=4, format="i", type="n", required=False),
    nysize=Header(start=332, length=4, format="i", type="n", required=False),
    unused84=Header(start=336, length=4, format="i", type="n", required=False),
    iftype=Header(start=340, length=4, format="i", type="i", required=True),
    idep=Header(start=344, length=4, format="i", type="i", required=False),
    iztype=Header(start=348, length=4, format="i", type="i", required=False),
    unused88=Header(start=352, length=4, format="i", type="i", required=False),
    iinst=Header(start=356, length=4, format="i", type="i", required=False),
    istreg=Header(start=360, length=4, format="i", type="i", required=False),
    ievreg=Header(start=364, length=4, format="i", type="i", required=False),
    ievtyp=Header(start=368, length=4, format="i", type="i", required=False),
    iqual=Header(start=372, length=4, format="i", type="i", required=False),
    isynth=Header(start=376, length=4, format="i", type="i", required=False),
    imagtyp=Header(start=380, length=4, format="i", type="i", required=False),
    imagsrc=Header(start=384, length=4, format="i", type="i", required=False),
    ibody=Header(start=388, length=4, format="i", type="i", required=False),
    unused98=Header(start=392, length=4, format="i", type="i", required=False),
    unused99=Header(start=396, length=4, format="i", type="i", required=False),
    unused100=Header(start=400, length=4, format="i", type="i", required=False),
    unused101=Header(start=404, length=4, format="i", type="i", required=False),
    unused102=Header(start=408, length=4, format="i", type="i", required=False),
    unused103=Header(start=412, length=4, format="i", type="i", required=False),
    unused104=Header(start=416, length=4, format="i", type="i", required=False),
    leven=Header(start=420, length=1, format="?", type="l", required=True),
    lpspol=Header(start=424, length=1, format="?", type="l", required=False),
    lovrok=Header(start=428, length=1, format="?", type="l", required=False),
    lcalda=Header(start=432, length=1, format="?", type="l", required=False),
    unused109=Header(start=436, length=1, format="?", type="l", required=False),
    kstnm=Header(start=440, length=8, format="8s", type="k", required=False),
    kevnm=Header(start=448, length=16, format="16s", type="k", required=False),
    khole=Header(start=464, length=8, format="8s", type="k", required=False),
    ko=Header(start=472, length=8, format="8s", type="k", required=False),
    ka=Header(start=480, length=8, format="8s", type="k", required=False),
    kt0=Header(start=488, length=8, format="8s", type="k", required=False),
    kt1=Header(start=496, length=8, format="8s", type="k", required=False),
    kt2=Header(start=504, length=8, format="8s", type="k", required=False),
    kt3=Header(start=512, length=8, format="8s", type="k", required=False),
    kt4=Header(start=520, length=8, format="8s", type="k", required=False),
    kt5=Header(start=528, length=8, format="8s", type="k", required=False),
    kt6=Header(start=536, length=8, format="8s", type="k", required=False),
    kt7=Header(start=544, length=8, format="8s", type="k", required=False),
    kt8=Header(start=552, length=8, format="8s", type="k", required=False),
    kt9=Header(start=560, length=8, format="8s", type="k", required=False),
    kf=Header(start=568, length=8, format="8s", type="k", required=False),
    kuser0=Header(start=576, length=8, format="8s", type="k", required=False),
    kuser1=Header(start=584, length=8, format="8s", type="k", required=False),
    kuser2=Header(start=592, length=8, format="8s", type="k", required=False),
    kcmpnm=Header(start=600, length=8, format="8s", type="k", required=False),
    knetwk=Header(start=608, length=8, format="8s", type="k", required=False),
    kdatrd=Header(start=616, length=8, format="8s", type="k", required=False),
    kinst=Header(start=624, length=8, format="8s", type="k", required=False),
)


@define(frozen=True)
class Footer:
    start: int
    length: int = 8
    format: str = "f"
    type: str = "d"


SAC_FOOTERS = dict(
    delta=Footer(start=0),
    b=Footer(start=8),
    e=Footer(start=16),
    o=Footer(start=24),
    a=Footer(start=32),
    t0=Footer(start=40),
    t1=Footer(start=48),
    t2=Footer(start=56),
    t3=Footer(start=64),
    t4=Footer(start=72),
    t5=Footer(start=80),
    t6=Footer(start=88),
    t7=Footer(start=96),
    t8=Footer(start=104),
    t9=Footer(start=112),
    f=Footer(start=120),
    evlo=Footer(start=128),
    evla=Footer(start=136),
    stlo=Footer(start=144),
    stla=Footer(start=152),
    sb=Footer(start=160),
    sdelta=Footer(start=168),
)


def validate_sacenum(instance: "SacIOBase", attribute: Attribute, value: Any) -> None:
    if not hasattr(SAC_ENUMS_DICT[attribute.name], value):
        raise ValueError(
            f"{value=} is an invalid enum value for sac attribute {attribute.name}."
        )


@define(kw_only=True)
class SacIOBase:
    delta: float = field(
        default=SACIO_DEFAULTS.delta, converter=float, validator=[type_validator()]
    )
    """Increment between evenly spaced samples (nominal value)."""
    odelta: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Observed increment if different from nominal value."""
    b: float = field(
        default=SACIO_DEFAULTS.b, converter=float, validator=[type_validator()]
    )
    """Beginning value of the independent variable."""
    o: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Event origin time (seconds relative to reference time)."""
    a: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """First arrival time (seconds relative to reference time)."""
    t0: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined time pick or marker 0 (seconds relative to reference time)."""
    t1: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined time pick or marker 1 (seconds relative to reference time)."""
    t2: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined time pick or marker 2 (seconds relative to reference time)."""
    t3: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined time pick or marker 3 (seconds relative to reference time)."""
    t4: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined time pick or marker 4 (seconds relative to reference time)."""
    t5: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined time pick or marker 5 (seconds relative to reference time)."""
    t6: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined time pick or marker 6 (seconds relative to reference time)."""
    t7: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined time pick or marker 7 (seconds relative to reference time)."""
    t8: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined time pick or marker 8 (seconds relative to reference time)."""
    t9: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined time pick or marker 9 (seconds relative to reference time)."""
    f: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Fini or end of event time (seconds relative to reference time)."""
    resp0: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Instrument response parameter 0 (not currently used)."""
    resp1: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Instrument response parameter 1 (not currently used)."""
    resp2: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Instrument response parameter 2 (not currently used)."""
    resp3: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Instrument response parameter 3 (not currently used)."""
    resp4: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Instrument response parameter 4 (not currently used)."""
    resp5: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Instrument response parameter 5 (not currently used)."""
    resp6: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Instrument response parameter 6 (not currently used)."""
    resp7: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Instrument response parameter 7 (not currently used)."""
    resp8: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Instrument response parameter 8 (not currently used)."""
    resp9: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Instrument response parameter 9 (not currently used)."""
    stla: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional(
            [type_validator(), validators.ge(-90), validators.le(90)]
        ),
    )
    """Station latitude (degrees, north positive)."""
    stlo: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional(
            [type_validator(), validators.gt(-180), validators.le(180)]
        ),
    )
    """Station longitude (degrees, east positive)."""
    stel: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Station elevation above sea level (meters)."""
    stdp: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Station depth below surface (meters)."""
    evla: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional(
            [type_validator(), validators.ge(-90), validators.le(90)]
        ),
    )
    """Event latitude (degrees, north positive)."""
    evlo: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional(
            [type_validator(), validators.gt(-180), validators.le(180)]
        ),
    )
    """Event longitude (degrees, east positive)."""
    evel: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Event elevation (meters)."""
    evdp: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Event depth below surface (kilometers -- previously meters)."""
    mag: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Event magnitude."""
    user0: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined variable storage area."""
    user1: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined variable storage area."""
    user2: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined variable storage area."""
    user3: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined variable storage area."""
    user4: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined variable storage area."""
    user5: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined variable storage area."""
    user6: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined variable storage area."""
    user7: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined variable storage area."""
    user8: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined variable storage area."""
    user9: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """User defined variable storage area."""
    cmpaz: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Component azimuth (degrees clockwise from north)."""
    cmpinc: float | None = field(
        default=None,
        converter=converters.optional(float),
        validator=validators.optional([type_validator()]),
    )
    """Component incident angle (degrees from upward vertical; SEED/MINISEED uses dip: degrees from horizontal down)."""
    nzyear: int | None = field(
        default=None, validator=validators.optional([type_validator()])
    )
    """GMT year corresponding to reference (zero) time in file."""
    nzjday: int | None = field(
        default=None, validator=validators.optional([type_validator()])
    )
    """GMT julian day."""
    nzhour: int | None = field(
        default=None, validator=validators.optional([type_validator()])
    )
    """GMT hour."""
    nzmin: int | None = field(
        default=None, validator=validators.optional([type_validator()])
    )
    """GMT minute."""
    nzsec: int | None = field(
        default=None, validator=validators.optional([type_validator()])
    )
    """GMT second."""
    nzmsec: int | None = field(
        default=None, validator=validators.optional([type_validator()])
    )
    """GMT millisecond."""
    nvhdr: int = field(default=SACIO_DEFAULTS.nvhdr, validator=[type_validator()])
    """Header version number."""
    norid: int | None = field(
        default=None, validator=validators.optional([type_validator()])
    )
    """Origin ID (CSS 3.0)."""
    nevid: int | None = field(
        default=None, validator=validators.optional([type_validator()])
    )
    """Event ID (CSS 3.0)."""
    nwfid: int | None = field(
        default=None, validator=validators.optional([type_validator()])
    )
    """Waveform ID (CSS 3.0)."""
    iftype: str = field(default=SACIO_DEFAULTS.iftype, validator=validate_sacenum)
    """Type of file."""
    idep: str = field(default=SACIO_DEFAULTS.idep, validator=validate_sacenum)
    """Type of dependent variable."""
    iztype: str = field(default=SACIO_DEFAULTS.iztype, validator=validate_sacenum)
    """Reference time equivalence."""
    iinst: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(4)]),
    )
    """Type of recording instrument."""
    istreg: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(4)]),
    )
    """Station geographic region."""
    ievreg: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(4)]),
    )
    """Event geographic region."""
    ievtyp: str = field(default=SACIO_DEFAULTS.ievtyp, validator=validate_sacenum)
    """Type of event."""
    iqual: str | None = field(
        default=None, validator=validators.optional(validate_sacenum)
    )
    """Quality of data."""
    isynth: str | None = field(
        default=None, validator=validators.optional(validate_sacenum)
    )
    """Synthetic data flag."""
    imagtyp: str | None = field(
        default=None, validator=validators.optional(validate_sacenum)
    )
    """Magnitude type."""
    imagsrc: str | None = field(
        default=None, validator=validators.optional(validate_sacenum)
    )
    """Source of magnitude information."""
    ibody: str | None = field(
        default=None, validator=validators.optional(validate_sacenum)
    )
    """Body / Spheroid definition used in Distance Calculations."""
    leven: bool = field(default=SACIO_DEFAULTS.leven, validator=[type_validator()])
    """TRUE if data is evenly spaced."""
    lpspol: bool | None = field(
        default=None, validator=validators.optional([type_validator()])
    )
    """TRUE if station components have a positive polarity (left-hand rule)."""
    lovrok: bool | None = field(
        default=None, validator=validators.optional([type_validator()])
    )
    """TRUE if it is okay to overwrite this file on disk."""
    kstnm: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """Station name."""
    kevnm: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(16)]),
    )
    """Event name."""
    khole: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """Nuclear: hole identifier; Other: location identifier (LOCID)."""
    ko: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """Event origin time identification."""
    ka: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """First arrival time identification."""
    kt0: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """User defined time pick identification."""
    kt1: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """User defined time pick identification."""
    kt2: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """User defined time pick identification."""
    kt3: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """User defined time pick identification."""
    kt4: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """User defined time pick identification."""
    kt5: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """User defined time pick identification."""
    kt6: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """User defined time pick identification."""
    kt7: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """User defined time pick identification."""
    kt8: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """User defined time pick identification."""
    kt9: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """User defined time pick identification."""
    kf: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """Fini identification."""
    kuser0: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """User defined variable storage area."""
    kuser1: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """User defined variable storage area."""
    kuser2: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """User defined variable storage area."""
    kcmpnm: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """Channel name. SEED volumes use three character names, and the third is the component/orientation. For horizontals, the current trend is to use 1 and 2 instead of N and E."""
    knetwk: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """Name of seismic network."""
    kdatrd: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """Date data was read onto computer."""
    kinst: str | None = field(
        default=None,
        validator=validators.optional([type_validator(), validators.max_len(8)]),
    )
    """Generic name of recording instrument."""

    data: npt.NDArray = field(factory=lambda: np.array([]), validator=type_validator())
    """Seismogram data."""
    x: npt.NDArray = field(factory=lambda: np.array([]), validator=type_validator())
    y: npt.NDArray = field(factory=lambda: np.array([]), validator=type_validator())
