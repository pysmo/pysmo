# WARNING: Do not edit this file!
# It is generated by running the script 'generate_sacio.py' using values from
# 'sacheader.yml' and the 'sacio-template.py.j2' file.
from ._defaults import SACIO_DEFAULTS
from typing import Any
from attrs import define, field, validators, converters, Attribute
from attrs_strict import type_validator
from enum import Enum
import numpy as np
import numpy.typing as npt


{%- for header, values in headers.items() %}
{%- if values.is_enum %}
class {{ header|upper }}(Enum):
  {%- for key in values.allowed_vals.keys() %}
  {{ key }} = {{ enum_dict[key] }}
  {%- endfor %}
{%- endif %}
{%- endfor %}

SAC_ENUMS_DICT = dict(
  {%- for header, values in headers.items() %}
  {%- if values.is_enum %}
  {{ header }}={{ header|upper }},
  {%- endif %}
  {%- endfor %}
)


@define(frozen=True)
class HeaderType:
    definition: str
    undefined: float | int | str | bool
    length: int
    format: str
    description: str | None = None


HEADER_TYPES = dict(
    {%- for type, values in header_types.items() %}
    {{ type }}=HeaderType(definition='{{ values.definition }}', undefined={{ values.undefined }}, length={{ values.length }}, format='{{ values.format }}'),
    {%- endfor %}
)


@define(frozen=True)
class Header:
    start: int
    length: int
    format: str
    type: str
    required: bool


SAC_HEADERS = dict(
    {%- for header, values in headers.items() %}
    {{ header }}=Header(start={{ values.start }}, length={{ values.length }}, format='{{ values.format }}', type='{{ values.header_type }}', required={{ values.required | default(False) }}),
    {%- endfor %}
)


@define(frozen=True)
class Footer:
    start: int
    length: int = 8
    format: str = 'f'
    type: str = 'd'

SAC_FOOTERS = dict(
    {%- for footer, values in footers.items() %}
    {{ footer }}=Footer(start={{ values.start }}),
    {%- endfor %}
)



{#
ENUM_DICT = dict(
    {%- for header, values in headers.items() %}
    {%- if values.is_enum %}
    {{ header }}=[
      {%- for key in values.allowed_vals.keys() %}
      '{{ key }}',
      {%- endfor %}
    ],
    {%- endif %}
    {%- endfor %}
)
#}

def validate_sacenum(instance: "SacIOBase", attribute: Attribute, value: Any) -> None:
    if not hasattr(SAC_ENUMS_DICT[attribute.name], value):
        raise ValueError(f"{value=} is an invalid enum value for sac attribute {attribute.name}.")

@define(kw_only=True)
class SacIOBase:
    {%- for header, header_dict in headers.items() -%}
      {%- if 'unused' not in header and 'internal' not in header %}
        {%- if header not in properties %}
    {{ header }}: {{ header_dict.python_type + " "-}}

          {%- if sacio_defaults[header] is defined -%}
     = field(default=SACIO_DEFAULTS.{{ header}}
            {%- if header_dict.python_type in ['float'] -%}
    , converter={{ header_dict.python_type }}
            {%- endif -%}
          {%- else -%}
     | None = field(default=None
          {%- if header_dict.python_type in ['float'] -%}
    , converter=converters.optional({{ header_dict.python_type }})
          {%- endif -%}
        {%- endif -%}

        {%- if validators[header] is defined -%}
     , validator={{ validators[header] }})
        {%- elif sacio_defaults[header] is defined -%}
     , validator=[type_validator()
          {%- if header_dict.python_type == 'str' -%}, validators.max_len({{ header_dict.length }}){%- endif -%}])
          {%- else -%}
     , validator=validators.optional([type_validator()
     {%- if header_dict.python_type == 'str' -%}, validators.max_len({{ header_dict.length }}){%- endif -%}]))
          {%- endif %}
    """{{ header_dict.description -}}"""
        {%- endif -%}
      {%- endif %}
    {%- endfor %}

    data: npt.NDArray = field(factory=lambda: np.array([]), validator=type_validator())
    """Seismogram data."""
    x: npt.NDArray = field(factory=lambda: np.array([]), validator=type_validator())
    y: npt.NDArray = field(factory=lambda: np.array([]), validator=type_validator())
