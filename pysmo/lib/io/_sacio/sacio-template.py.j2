# WARNING: Do not edit this file!
# It is generated by running the script 'generate_sacio.py' using values from
# 'sacheader.yml' and the 'sacio-template.py.j2' file.
from ._lib import SACIO_DEFAULTS
from typing import Any
from attrs import define, field, validators, converters, Attribute
from attrs_strict import type_validator
from enum import IntEnum, StrEnum, auto
import numpy as np
import numpy.typing as npt


{%- for header, values in headers.items() %}
{%- if values.is_enum %}
class {{ header|upper }}(IntEnum):
  {%- for key in values.allowed_vals.keys() %}
  {{ key }} = {{ enum_dict[key] }}
  {%- endfor %}
{%- endif %}
{%- endfor %}

class SAC_TIME_HEADERS(StrEnum):
  {%- for time_header in time_headers %}
  {{ time_header }} = auto()
  {%- endfor %}

SAC_ENUMS_DICT = dict(
  {%- for header, values in headers.items() %}
  {%- if values.is_enum %}
  {{ header }}={{ header|upper }},
  {%- endif %}
  {%- endfor %}
)


@define(frozen=True)
class HeaderType:
    definition: str
    undefined: float | int | str | bool
    length: int
    format: str
    description: str | None = None


HEADER_TYPES = dict(
    {%- for type, values in header_types.items() %}
    {{ type }}=HeaderType(definition='{{ values.definition }}', undefined={{ values.undefined }}, length={{ values.length }}, format='{{ values.format }}'),
    {%- endfor %}
)


@define(frozen=True)
class Header:
    start: int
    length: int
    format: str
    type: str
    required: bool


SAC_HEADERS = dict(
    {%- for header, values in headers.items() %}
    {{ header }}=Header(start={{ values.start }}, length={{ values.length }}, format='{{ values.format }}', type='{{ values.header_type }}', required={{ values.required | default(False) }}),
    {%- endfor %}
)


@define(frozen=True)
class Footer:
    start: int
    length: int = 8
    format: str = 'f'
    type: str = 'd'

SAC_FOOTERS = dict(
    {%- for footer, values in footers.items() %}
    {{ footer }}=Footer(start={{ values.start }}),
    {%- endfor %}
)



{#
ENUM_DICT = dict(
    {%- for header, values in headers.items() %}
    {%- if values.is_enum %}
    {{ header }}=[
      {%- for key in values.allowed_vals.keys() %}
      '{{ key }}',
      {%- endfor %}
    ],
    {%- endif %}
    {%- endfor %}
)
#}


def validate_sacenum(instance: "SacIOBase", attribute: Attribute, value: Any) -> None:
    if not hasattr(SAC_ENUMS_DICT[attribute.name], value):
        raise ValueError(f"{value=} is an invalid enum value for sac attribute {attribute.name}.")


def validate_with_iztype(
    instance: "SacIOBase", attribute: Attribute, value: float | None
) -> None:
    old_value = getattr(instance, attribute.name)
    if (
        instance._zero_time_can_be_none_zero is False
        and attribute.name == instance.iztype
        and old_value is not None
        and value != old_value
        and value != 0
    ):
        raise RuntimeError(
            f"Unable to change '{attribute.name}' because it is zero-time (iztype={instance.iztype})."
        )

@define(kw_only=True)
class SacIOBase:
    {%- for header, header_dict in headers.items() -%}
      {%- if 'unused' not in header and 'internal' not in header %}
        {%- if header not in properties %}
        {%- if sacio_defaults[header] is defined -%}{% set has_default = True %}{% else %}{% set has_default = False %}{% endif %}
        {%- if header_dict.converter is defined -%}{% set has_converter = True %}{% else %}{% set has_converter = False %}{% endif %}
        {%- if header_dict.validators is defined -%}{% set has_validators = True %}{% else %}{% set has_validators = False %}{% endif %}
    {{ header }}: {{ header_dict.python_type + " "-}} {%- if not has_default -%}| None{%- endif -%} = field(

          {%- if has_default -%}default=SACIO_DEFAULTS.{{ header}} {%-else-%}default=None{%-endif-%}

          {%- if has_converter -%}
            , converter={%- if not has_default -%} converters.optional( {%- endif -%}
              {{ header_dict.converter }}
            {%- if not has_default -%} ) {%- endif -%}
          {%- endif -%}

          {%- if has_validators -%}
            , validator={%- if not has_default -%} validators.optional( {%- endif -%}
              {%- if header_dict.validators|length > 1 -%} [ {%- endif -%}
              {%- for validator in header_dict.validators -%}
                {{ validator }},
              {%- endfor -%}
              {%- if header_dict.validators|length > 1 -%} ] {%- endif -%}
            {%- if not has_default -%} ) {%- endif -%}
          {%- endif -%}
      )
    """{{- header_dict.description }}"""
        {% endif %}
      {%- endif %}
    {%- endfor %}

    data: npt.NDArray = field(factory=lambda: np.array([]), validator=type_validator())
    """Seismogram data."""
    x: npt.NDArray = field(factory=lambda: np.array([]), validator=type_validator())
    y: npt.NDArray = field(factory=lambda: np.array([]), validator=type_validator())
    _zero_time_can_be_none_zero: bool = field(default=False, validator=type_validator())
    """Allow time header to be changed even if it is the current zero-time"""
